%YAML 1.2
---
# todo(jbr) forward decls
# todo(jbr) variable.language for 'this'
# todo(jbr) variable.other.member for member variables (not functions)
# todo(jbr) asterisk in pointer types scoped as arithmetic
name: C/C++ (better)
file_extensions: [h, c, hpp, cpp, inl]
scope: source.c++
variables:
  name: '[A-Za-z_]\w*'
  type_name: '[A-Za-z_][\w:]*' # types can have :: in for example std::string
  variable: '\b{{name}}\b(?=\s*[;=\<>)\|&\^\.-])'
  member_variable: '(?<=::|\.|->){{variable}}'
contexts:
  prototype:
    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.c++
      push: line_comment

    # Block comments
    - match: '/\*'
      scope: punctuation.definition.comment.c++
      push: block_comment

  main:
    - include: common

    - match: '#'
      push: preprocessor

    - match: \bnamespace\b
      scope: keyword.control.c++
      set: namespace_name

    - match: \b(new|delete\[\]|delete|return)\b
      scope: keyword.control.c++

    - match: \btypedef\b
      scope: storage.modifier.c++
      push:
        - match: \b({{type_name}})\b\s*\b({{type_name}})\b\s*;
          captures:
            1: storage.type.c++
            2: entity.name.type.c++
          pop: true

        - match: \b{{type_name}}\b
          scope: storage.type.c++

    - match: \b(static|inline|const|extern)\b
      scope: storage.modifier.c++

    - match: \benum\b
      scope: storage.modifier.c++
      push:
        - match: \bclass\b
          scope: storage.modifier.c++

        - match: \b{{type_name}}\b
          scope: storage.type.c++
        
        - match: \{
          set:
            - match: \}
              pop: true

            - match: \b{{name}}\b
              scope: variable.other.member.c++ # no way to distinguish between member variable and enum when you have code like SomeEnum::EnumValue

    - match: '{{member_variable}}'
      scope: variable.other.member.c++

    - match: '{{variable}}'
      scope: variable.other.c++

    - match: \b{{name}}\b(?=\s*\()
      scope: entity.name.function.c++
      push:
        - match: ;
          pop: true
        - match: '{'
          set: function_body
        - include: common
        - match: \bconst\b
          scope: storage.modifier.c++
        - match: \b{{name}}\b(?=\s*[,\)])
          scope: variable.parameter
        - match: \b{{name}}\b
          scope: storage.type.c++

    - match: \b{{name}}\b
      scope: storage.type.c++

  common:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.c++
      push: double_quoted_string

    # Numbers
    - match: '\b[-]?[0-9]+[.]?[0-9]*[f]?\b'
      scope: constant.numeric.c++

    # Nullptr
    - match: \b(nullptr|true|false)\b
      scope: constant.language.c++

  double_quoted_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.c++
    - match: '\\.'
      scope: constant.character.escape.c++
    - match: '"'
      scope: punctuation.definition.string.end.c++
      pop: true

  line_comment:
    - meta_scope: comment.line.c++
    - match: $
      pop: true

  block_comment:
    - meta_scope: comment.block.c++
    - match: '\*/'
      scope: punctuation.definition.comment.c++
      pop: true

# generic handling of preprocessor
  preprocessor:
    - meta_scope: keyword.control.import.c++

    - include: common

    - match: <
      scope: punctuation.definition.generic.begin.c++
      push:
        - meta_scope: string.quoted.other
        - match: '>'
          scope: punctuation.definition.generic.end.c++
          pop: true

    - match: $
      pop: true

# after namespace keyword, find name of namespace if it exists
  namespace_name:
    - match: \w
      push:
        - meta_scope: entity.name.namespace.c++
        - match: \b
          pop: true
    - match: '{'
      pop: true

  function_body:
    - match: '{'
      push: function_body

    - match: '}'
      pop: true

    - include: common

    - match: \b(if|else|for|while|do)\b
      scope: keyword.control.conditional.c++

    - match: \b(namespace|new|delete\[\]|delete|return)\b
      scope: keyword.control.c++

    - match: \b(const|static)\b
      scope: storage.modifier.c++

    - match: '{{member_variable}}'
      scope: variable.other.member.c++

    - match: '{{variable}}'
      scope: variable.other.c++

    - match: \b{{name}}\b(?=\s*\()
      scope: variable.function.c++

    - match: \b{{name}}\b
      scope: storage.type.c++

    - match: '(->|\.|::)'
      scope: punctuation.accessor.c++

    - match: (==|\|\||&&|<=|>=|<|>|!=)
      scope: keyword.operator.logical.c++

    - match: =
      scope: keyword.operator.assignment.c++

    - match: (&|\||!|\^)
      scope: keyword.operator.bitwise.c++

    - match: (\+|-|\*|\\)
      scope: keyword.operator.arithmetic.c++